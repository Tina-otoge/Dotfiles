#!/bin/bash
################
# SH FUNCTIONS #
################

psrc() {
	if ! [ -d .venv ]; then
		python -m venv .venv
		if [ -f requirements.txt ]; then
			./.venv/bin/pip install -r requirements.txt
		fi
	fi
	source ./.venv/bin/activate
}

dbx() {
	default_box=${1:-arch}
	boxes=$(distrobox list | cut -d '|' -f 2 | tail -n +2 | head -n -1 | xargs)
	for box in $boxes; do
		if [[ "$box" == "$default_box" ]]; then
			exec distrobox enter "$box"
			return
		fi
	done
	echo "No distrobox $default_box found" >&2
}

prun() {
	psrc
	python "$@"
}

mkcd()
{
	mkdir -p "$*"
	cd "$*"
}

vw()
{
	vim `which "$1"`
}

vim()
{
	mkdir -p "$(dirname "$1")"
	command vim "$@"
}

git-shallow()
{
	default_branch="$(git config init.defaultbranch)"
	usage="USAGE:\n$0 <Git URL> [commit/tag/branch/... (default: $default_branch)] [dir (default: .)]"
	if [ -z "$1" ]; then
		echo Missing Git URL >&2
		echo >&2
		echo $usage >&2
		return 1
	fi

	if [ "$1" == '-h'] || [ "$1" == '--help' ]; then
		echo $usage
		return 0
	fi

	git init ${3:-.}
	git remote add origin "$1"
	git fetch --depth 1 origin ${2:-$deault_branch}
	git checkout FETCH_HEAD
}

lookup() {
	locate -b --regex "^$1$"
}

fargs() {
	cmd=$1
	shift
	while (( $# )); do
		$cmd "$1"
		shift
	done
}

autoclick() {
	echo Initiating autoclick in 1s...
	sleep 1
	while true; do
		xdotool mousedown 1;
		sleep 1e-03;
		xdotool mouseup 1;
		sleep 1e-03;
	done
	xdotool mouseup 1;
	echo Mouse released
}

chfix() {
	find ~/.local/bin -type f -exec chmod +x {} \;
}

cmd_exists() {
	if command -v $1 >/dev/null 2>&1; then
		return 0
	fi
	return 1
}


uu() {
	if [ $(id -u) != 0 ] && cmd_exists sudo; then
		prefix='sudo'
	else
		prefix=''
	fi
	cmd_exists flatpak && flatpak update
	cmd_exists apt && $prefix apt update && $prefix apt upgrade $* && return 0
	cmd_exists apt-get && $prefix apt-get update && $prefix apt-get upgrade $* && return 0
	cmd_exists dnf && $prefix dnf upgrade --refresh $* && return 0
	cmd_exists yay && yay $* && return 0
	cmd_exists pacman && $prefix pacman -Syu $* && return 0

	echo No known package manager found. Aborting. >&2
	return 1
}

ud() {
	(cd "$dotfiles" && git pull --ff && git submodule update --init)
}

copy() {
	if cmd_exists termux-clipboard-set; then
		echo "$1" | termux-clipboard-set
	else
		echo "$1" | xclip -sel p -f | xclip -sel c
	fi
}

streamable() {
	code=$(curl -# https://api.streamable.com/upload -u "$STREAMABLEUSER":"$STREAMABLEPASSWORD" -F file=@"$1")
	link='https://streamable.com/'$code
	echo "$link"
	copy "$link"
}

transfer() {
	ext="${1##*.}"
	name="$(date +%s)".$ext
	link="$(curl -# --upload-file "$1" 'https://transfer.sh/'"$name")"
	echo "$link"
	copy "$link"
}

pathmunge () { 
	if ! echo $PATH | grep -E -q "(^|:)$1($|:)" ; then
		if [ "$2" = "after" ] ; then
			PATH=$PATH:$1
		else
			PATH=$1:$PATH
		fi
	fi
}

uguu() {
	rem=false
	if [[ "$1" == '-c' ]]; then
		xclip -selection c -o > .screen.png;
		1=.screen.png;
		rem=true
		name=screenshot.png
	else
		name="$(basename "$1")"
	fi
	link="$(curl -# -i -F name="$name" -F file=@"$1" 'https://uguu.se/api.php?d=upload-tool' | grep 'https://a.uguu.se/')"
	echo "$link"
	copy "$link"
	if $rem; then
		rm -f "$1"
	fi
}

casm()
{
	nasm -f elf64 "$1" -o /tmp/casm.o
	ld -dynamic-linker /lib64/ld-linux-x86-64.so.2 /tmp/casm.o \
		-o ${2:-a.out} -lc
}
